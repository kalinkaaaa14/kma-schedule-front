[{"/home/yaroslava/WebstormProjects/kma-schedule-front/src/index.js":"1","/home/yaroslava/WebstormProjects/kma-schedule-front/src/App.js":"2","/home/yaroslava/WebstormProjects/kma-schedule-front/src/store/auth-context.js":"3","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/SignUpPage.js":"4","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/SignInPage.js":"5","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/Records.js":"6","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/HomePage.js":"7","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddRecordPage.js":"8","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddGroupPage.js":"9","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddLecturerPage.js":"10","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddDisciplinePage.js":"11","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Layout/Layout.js":"12","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Auth/SignUpForm.js":"13","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Auth/SignInForm.js":"14","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddRecordForm.js":"15","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddGroupForm.js":"16","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddLecturerForm.js":"17","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddDisciplineForm.js":"18","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Layout/MainNavigation.js":"19","/home/yaroslava/WebstormProjects/kma-schedule-front/src/hooks/getData.js":"20","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddClassroomPage.js":"21","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddClassroomForm.js":"22","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddClassTimeForm.js":"23"},{"size":371,"mtime":1638994707236,"results":"24","hashOfConfig":"25"},{"size":2030,"mtime":1639089563102,"results":"26","hashOfConfig":"25"},{"size":1447,"mtime":1639084337777,"results":"27","hashOfConfig":"25"},{"size":167,"mtime":1638994707236,"results":"28","hashOfConfig":"25"},{"size":167,"mtime":1638994707236,"results":"29","hashOfConfig":"25"},{"size":662,"mtime":1639084337777,"results":"30","hashOfConfig":"25"},{"size":106,"mtime":1639084337777,"results":"31","hashOfConfig":"25"},{"size":184,"mtime":1639084337777,"results":"32","hashOfConfig":"25"},{"size":178,"mtime":1639084337777,"results":"33","hashOfConfig":"25"},{"size":193,"mtime":1639085957799,"results":"34","hashOfConfig":"25"},{"size":204,"mtime":1639084337777,"results":"35","hashOfConfig":"25"},{"size":266,"mtime":1639084337777,"results":"36","hashOfConfig":"25"},{"size":2832,"mtime":1638994707232,"results":"37","hashOfConfig":"25"},{"size":2843,"mtime":1639084337773,"results":"38","hashOfConfig":"25"},{"size":4521,"mtime":1639084337777,"results":"39","hashOfConfig":"25"},{"size":5396,"mtime":1639084337777,"results":"40","hashOfConfig":"25"},{"size":2528,"mtime":1639086736624,"results":"41","hashOfConfig":"25"},{"size":2788,"mtime":1639084337777,"results":"42","hashOfConfig":"25"},{"size":2937,"mtime":1639084337777,"results":"43","hashOfConfig":"25"},{"size":647,"mtime":1639084337777,"results":"44","hashOfConfig":"25"},{"size":198,"mtime":1639087210561,"results":"45","hashOfConfig":"25"},{"size":2195,"mtime":1639087729943,"results":"46","hashOfConfig":"25"},{"size":4101,"mtime":1639089563114,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"i7imz5",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/yaroslava/WebstormProjects/kma-schedule-front/src/index.js",[],["103","104"],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/App.js",["105"],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/store/auth-context.js",["106"],"import React, { useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconst AuthContext = React.createContext({\n    token: '',\n    isLoggedIn: false,\n    roles: [],\n    login: (token) => {},\n    logout: () => {},\n});\n\n\nconst retrieveStoredToken = () => {\n    const storedToken = cookies.get('token');\n\n    return {\n        token: storedToken\n    };\n};\n\nexport const AuthContextProvider = (props) => {\n    const history = useHistory();\n    const tokenData = retrieveStoredToken().token;\n    let initialToken;\n    if (tokenData) {\n        initialToken = tokenData.token;\n    }\n\n    const [token, setToken] = useState(initialToken);\n    const [roles, setRoles] = useState([]);\n    const userIsLoggedIn = !!token;\n\n\n    const logoutHandler = useCallback(() => {\n        setToken(null);\n        cookies.remove('token');\n        window.location.href = \"/\";\n    }, []);\n\n    const loginHandler = (token, roles) => {\n        setToken(token);\n        setRoles(roles);\n        cookies.set('token', token);\n    };\n\n    const contextValue = {\n        token: token,\n        isLoggedIn: userIsLoggedIn,\n        roles: roles,\n        login: loginHandler,\n        logout: logoutHandler,\n    };\n\n    return (\n        <AuthContext.Provider value={contextValue}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthContext;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/SignUpPage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/SignInPage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/Records.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/HomePage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddRecordPage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddGroupPage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddLecturerPage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddDisciplinePage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Layout/Layout.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Auth/SignUpForm.js",["107"],"import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classes from './AuthForm.module.css';\n\nconst SignUpForm = () => {\n    const history = useHistory();\n    const emailInputRef = useRef();\n    const passwordInputRef = useRef();\n    const usernameInputRef = useRef();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        const enteredEmail = emailInputRef.current.value;\n        const enteredPassword = passwordInputRef.current.value;\n        const enteredUsername = usernameInputRef.current.value;\n        // to - do: Add validation\n\n        setIsLoading(true);\n        fetch(\"http://localhost:8000/sign-up\", {\n            method: 'POST',\n            body: JSON.stringify({\n                email: enteredEmail,\n                password: enteredPassword,\n                username:enteredUsername,\n                returnSecureToken: true,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n            .then((res) => {\n                setIsLoading(false);\n                if (res.ok) {\n                    history.replace('/sign-in');\n                } else {\n                    return res.json().then((data) => {\n                        let errorMessage = 'Authentication failed!';\n                        throw new Error(errorMessage);\n                    });\n                }\n            })\n            .catch((err) => {\n                alert(err.message);\n            });\n    };\n\n    return (\n        <section className={classes.auth}>\n            <h1>Sign up</h1>\n            <form onSubmit={submitHandler}>\n                <div className={classes.control}>\n                    <label htmlFor='username'>Your Username</label>\n                    <input type='text' id='username' required ref={usernameInputRef} />\n                </div>\n                <div className={classes.control}>\n                    <label htmlFor='email'>Your Email</label>\n                    <input type='email' id='email' required ref={emailInputRef} />\n                </div>\n                <div className={classes.control}>\n                    <label htmlFor='password'>Your Password</label>\n                    <input\n                        type='password'\n                        id='password'\n                        required\n                        ref={passwordInputRef}\n                    />\n                </div>\n                <div className={classes.actions}>\n                    {!isLoading && (\n                        <button>Sign up</button>\n                    )}\n                    {isLoading && <p>Sending request...</p>}\n                </div>\n            </form>\n        </section>\n    );\n};\n\nexport default SignUpForm;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Auth/SignInForm.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddRecordForm.js",["108"],"import { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport classes from '../Auth/AuthForm.module.css';\nimport {getAllClassrooms, getAllClassTimes, getAllDisciplines, getAllGroups, getAllLectors} from \"../../hooks/getData\";\n\nconst AddRecordForm = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [disciplines, setDisciplines] = useState([]);\n    const [disciplineId, setDisciplineSelected] = useState(1);\n    const [lectors, setLectors] = useState([]);\n    const [lecturerId, setLectorSelected] = useState(1);\n    const [groups, setGroups] = useState([]);\n    const [groupId, setGroupSelected] = useState(1);\n    const [classtimes, setClasstimes] = useState([]);\n    const [classTimeId, setClasstimeSelected] = useState(1);\n    const [classrooms, setClassrooms] = useState([]);\n    const [classroomId, setClassroomSelected] = useState(1);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setDisciplines(await getAllDisciplines());\n            setGroups(await getAllGroups());\n            setClassrooms(await getAllClassrooms());\n            setClasstimes(await getAllClassTimes());\n            setLectors(await getAllLectors());\n        };\n        fetchData();\n        // console.log(lectors)\n        // console.log(disciplines)\n    }, []);\n\n    const submitHandler = async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n        console.log(disciplineId, \"HEERE\")\n        const response = await fetch(\"/records\", {\n            method: 'POST',\n            credentials: 'same-origin',\n            body: JSON.stringify({\n                disciplineId,\n                classTimeId,\n                groupId,\n                classroomId,\n                lecturerId,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        console.log(response);\n        response.ok ?  alert(\"Record is added successfully.\") :  alert(\"Adding record FAILED. Status: \"+ response.status);\n    };\n\n    return (\n        <section className={classes.auth}>\n            <h1>Запис в розкладі</h1>\n            <form onSubmit={submitHandler}>\n                <select className={classes.control} name=\"disciplineId\" id=\"disciplineId\"\n                        onChange={e => setDisciplineSelected(e.target.value)}>\n                    {(disciplines || []).map(i => (\n                        <option value={i.disciplineId} key={i.disciplineId}>\n                            {i.name}\n                        </option>\n                    ))}\n                </select>\n                <select className={classes.control} name=\"classTimeId\" id=\"classTimeId\" onChange={e => setClasstimeSelected(e.target.value)}>\n                    {(classtimes || []).map(i => (\n                        <option value={i.classTimeId} key={i.classTimeId}>\n                            {i.classTime}\n                        </option>\n                    ))}\n                </select>\n                <select className={classes.control} name=\"groupId\" id=\"groupId\" onChange={e => setGroupSelected(e.target.value)}>\n                    {(groups || []).map(i => (\n                        <option value={i.groupId} key={i.groupId}>\n                            {i.groupNumber}\n                        </option>\n                    ))}\n                </select>\n                <select className={classes.control} name=\"classroomId\" id=\"classroomId\" onChange={e => setClassroomSelected(e.target.value)}>\n                    {(classrooms || []).map(i => (\n                        <option value={i.classroomId} key={i.classroomId}>\n                            {i.name}\n                        </option>\n                    ))}\n                </select>\n                <select className={classes.control} name=\"lecturerId\" id=\"lecturerId\" onChange={e => setLectorSelected(e.target.value)}>\n                    {(lectors || []).map(i => (\n                        <option value={i.lecturerId} key={i.lecturerId}>\n                            {i.name}\n                        </option>\n                    ))}\n                </select>\n                <div className={classes.actions}>\n                    {!isLoading && (\n                        <button>Створити запис</button>\n                    )}\n                    {isLoading && <p>Відправляємо дані...</p>}\n                </div>\n            </form>\n        </section>\n    );\n};\n\nexport default AddRecordForm;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddGroupForm.js",["109","110","111"],"import {useState, useRef, useContext, useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AddGroup.module.css';\n\nconst AddGroupForm = () => {\n    const [specialization, setSpecialization] = useState(\"ipz\");\n    const [degree,setDegree] = useState(\"bachelor\");\n    const [course,setCourse] = useState(1);\n    const [isLecture,setIsLecture] = useState(false);\n    const [groupNumber,setGroupNumber] = useState('');\n    const [lecturerId,setLecturerId] = useState(1);\n    const [lectors,setLectors] = useState([]);\n\n    const authCtx = useContext(AuthContext);\n    const [isLoading, setIsLoading] = useState(false);\n\n\n    const getLectors = async () => {\n        const data = await fetch(\"/lectors/all\");\n        const dataJson = await data.json();\n        setLectors(dataJson);\n    }\n\n    useEffect(  () => {\n        getLectors();\n    }, [])\n\n\n    const submitHandler = async (event) => {\n        event.preventDefault();\n\n        //console.log(lectors);\n        // console.log(specialization)\n        // console.log(degree)\n        // console.log(course)\n        // console.log(isLecture)\n        // console.log(groupNumber)\n        // console.log(lecturerId)\n        // console.log(\"=================================\")\n        // to - do : Add validation\n\n        setIsLoading(true);\n\n\n       const response = await fetch(\"http://localhost:8000/group\", {\n            method: 'POST',\n            credentials: 'same-origin',\n            body: JSON.stringify({\n                isLecture,\n                specialization,\n                degree,\n                course,\n                groupNumber,\n                lecturerId\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n       console.log(response);\n       response.ok ?  alert(\"Group is added successfully.\") :  alert(\"Adding group FAILED. Status: \"+ response.status);\n\n       setSpecialization('ipz');\n       setDegree('bachelor');\n       setCourse(1);\n       setIsLecture(false);\n       setGroupNumber('');\n       setLecturerId(1);\n    };\n\n    return (\n        <section className={classes.auth}>\n            <h1>Додай нову групу тут</h1>\n            <form onSubmit={submitHandler}>\n                <div className={classes.control}>\n                    <label htmlFor='specialization'>Спеціальність</label>\n                    <select name=\"specialization\" id=\"specialization\"   onChange={e => setSpecialization(e.target.value)} >\n                        <option key={\"ipz\"} value={'ipz'}>ІПЗ</option>\n                        <option key={\"kn\"} value={'kn'}>КН</option>\n                        <option key={\"pm\"} value={'pm'}>ПМ</option>\n                    </select>\n                </div>\n                <div className={classes.control}>\n                    <label htmlFor='degree'>Ступінь</label>\n                    <select name=\"degree\" id=\"degree\" onChange={e => setDegree(e.target.value)} >\n                        <option key={\"bachelor\"} value={'bachelor'}>Бакалавр</option>\n                        <option key={\"master\"} value={'master'}>Магістр</option>\n                    </select>\n                </div>\n\n                <div className={classes.control}>\n                    <label htmlFor='course'>Курс</label>\n                    <select name=\"course\" defaultValue={1} id=\"course\" onChange={e => setCourse(e.target.value)} >\n                        <option key={1} value={1}>1</option>\n                        <option key={2} value={2}>2</option>\n                        <option key={3} value={3}>3</option>\n                        <option key={4} value={4}>4</option>\n                        <option key={5} value={5}>5</option>\n                        <option key={6} value={6}>6</option>\n                    </select>\n                </div>\n\n                <div className=\"form-check\" style={{display: \"inline-block\"}}>\n                    <input name=\"isLecture\" onChange={e => setIsLecture(e.target.checked)} className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"isLecture\"/>\n                </div>\n\n                <div className=\"form-group\">\n                    <input name=\"groupNumber\" id=\"groupNumber\" type=\"number\" onChange={e => setGroupNumber(e.target.value)} placeholder=\"Номер групи\" className=\"form-control\"/>\n                </div>\n\n                <div className={classes.control}>\n                    <label htmlFor='lector'>Лектор</label>\n                    <select name=\"lector\" id=\"lector\" onChange={e => setLecturerId(e.target.value)}>\n                        {(lectors || []).map(lector => (\n                            <option value={lector.lecturerId} key={lector.lecturerId}>\n                                {lector.surname + ' ' + lector.name + ' '+ lector.middlename}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className={classes.actions}>\n                    {!isLoading && (\n                        <button>Створити групу</button>\n                    )}\n                    {isLoading && <p>Відправляємо дані...</p>}\n\n                </div>\n            </form>\n        </section>\n    );\n};\n\nexport default AddGroupForm;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddLecturerForm.js",["112","113","114"],"import {useState, useRef, useContext, useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AddGroup.module.css';\n\nconst AddLecturerForm = () => {\n    const [name, setName] = useState(\"\");\n    const [surname,setSurname] = useState(\"\");\n    const [middlename,setMiddlename] = useState(\"\");\n\n    const authCtx = useContext(AuthContext);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(  () => {\n    }, [])\n\n\n    const submitHandler = async (event) => {\n        event.preventDefault();\n\n        setIsLoading(true);\n\n\n        const response = await fetch(\"/lectors\", {\n            method: 'POST',\n            credentials: 'same-origin',\n            body: JSON.stringify({\n                name,\n                surname,\n                middlename\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        console.log(response);\n        response.ok ?  alert(\"Лектора додано успішно.\") :  alert(\"Лектора не було додано. Статус: \"+ response.status);\n\n        setName('');\n        setMiddlename('');\n        setSurname('');\n    };\n\n    return (\n        <section className={classes.auth}>\n            <h1>Додай нового лектора тут</h1>\n            <form onSubmit={submitHandler}>\n\n                <div className=\"form-group\">\n                    <input name=\"lectorName\" id=\"lectorName\" type=\"text\" onChange={e => setName(e.target.value)} placeholder=\"Ім'я\" className=\"form-control\"/>\n                </div>\n\n                <div className=\"form-group\">\n                    <input name=\"lectorSurname\" id=\"lectorSurname\" type=\"text\" onChange={e => setSurname(e.target.value)} placeholder=\"Прізвище\" className=\"form-control\"/>\n                </div>\n\n                <div className=\"form-group\">\n                    <input name=\"lectorMiddlenae\" id=\"lectorMiddlenae\" type=\"text\" onChange={e => setMiddlename(e.target.value)} placeholder=\"По-батькові\" className=\"form-control\"/>\n                </div>\n\n                <div className={classes.actions}>\n                    {!isLoading && (\n                        <button>Створити лектора</button>\n                    )}\n                    {isLoading && <p>Відправляємо дані...</p>}\n\n                </div>\n            </form>\n        </section>\n    );\n};\n\nexport default AddLecturerForm;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddDisciplineForm.js",["115","116"],"import {useState, useRef, useContext, useEffect} from 'react';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AddGroup.module.css';\n\nconst AddDisciplineForm = () => {\n\n    const [name, setName] = useState('');\n    const [lectors,setLectors] = useState([]);\n    const [lecturerId,setLecturerId] = useState(1);\n\n    const authCtx = useContext(AuthContext);\n    const [isLoading, setIsLoading] = useState(false);\n\n\n    const getLectors = async () => {\n        const data = await fetch(\"/lectors/all\");\n        const dataJson = await data.json();\n        setLectors(dataJson);\n    }\n\n    useEffect(  () => {\n        getLectors();\n    }, [])\n\n\n    const submitHandler = async (event) => {\n        event.preventDefault();\n        console.log(name);\n        console.log(lectors);\n        console.log(lecturerId)\n\n        // to - do : Add validation\n\n        setIsLoading(true);\n\n\n        const response = await fetch(\"http://localhost:8000/disciplines\", {\n            method: 'POST',\n            credentials: 'same-origin',\n            body: JSON.stringify({\n              name,\n                lecturerId\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        console.log(response);\n        response.ok ?  alert(\"Group is added successfully.\") :  alert(\"Adding group FAILED. Status: \"+ response.status);\n\n        setName('');\n        setLecturerId(1);\n    };\n\n    return (\n        <section className={classes.auth}>\n            <h1>Додай нову дисципліну тут</h1>\n            <form onSubmit={submitHandler}>\n\n                <div className=\"form-group\">\n                    <textarea type=\"text\" name=\"name\" id=\"name\" placeholder=\"Назва\" className=\"form-control\" onChange={e => setName(e.target.value)}/>\n                </div>\n\n                <div className={classes.control}>\n                    <label htmlFor='lector'>Лектор</label>\n                    <select name=\"lector\" id=\"lector\" onChange={e => setLecturerId(e.target.value)}>\n                        {(lectors || []).map(lector => (\n                            <option value={lector.lecturerId} key={lector.lecturerId}>\n                                {lector.surname + ' ' + lector.name + ' '+ lector.middlename}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n\n                <div className={classes.actions}>\n                    {!isLoading && (\n                        <button>Створити групу</button>\n                    )}\n                    {isLoading && <p>Відправляємо дані...</p>}\n\n                </div>\n            </form>\n        </section>\n    );\n};\n\nexport default AddDisciplineForm;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Layout/MainNavigation.js",["117","118"],"import {useContext, useEffect, useState} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './MainNavigation.module.css'\nconst MainNavigation = () => {\n    const authCtx = useContext(AuthContext);\n\n    const isLoggedIn = authCtx.isLoggedIn;\n    const roles = authCtx.roles;\n\n    const logoutHandler = () => {\n        authCtx.logout();\n    };\n\n    const [admin, setAdmin] = useState(false);\n    const [user, setUser] = useState(false);\n    const getRole = async () => {\n        const data = await fetch(\"/authority\");\n        const dataJson = await data.json();\n        if(!dataJson.hasOwnProperty('error')) {\n            const roles = dataJson.map(role => role.name);\n            setUser(roles.includes(\"USER\"));\n            setAdmin(roles.includes(\"ADMIN\"));\n        }\n    }\n\n    useEffect(  () => {\n        getRole();\n    }, [])\n\n    return (\n        <header className={classes.header}>\n            <Link to='/'>\n                <div className={classes.logo}>KMA Scheduler</div>\n            </Link>\n            <nav>\n                <ul>\n                    {!admin && !user && (\n                        <li>\n                            <Link to='/sign-in'>Sign in</Link>\n                        </li>\n                    )}\n                    {!admin && !user && (\n                        <li>\n                            <Link to='/sign-up'>Sign up</Link>\n                        </li>\n                    )}\n                    {(admin || user) &&(\n                        <li>\n                            <Link to='/records'>Records</Link>\n                        </li>\n                    )}\n\n                    {admin &&\n                        <li>                            <div className={classes.dropdown}>\n                                <button className={classes.dropbtn}>Dropdown\n                                    <i className=\"fa fa-caret-down\"/>\n                                </button>\n                                <div className={classes.dropdownContent}>\n                                    <a href=\"/records/add\">Add records</a>\n                                    <a href=\"/disciplines\">Add disciplines</a>\n                                    <a href=\"/group/add\">Add groups</a>\n                                    <a href=\"/lectors\">Add lectors</a>\n                                    <a href=\"/classtime\">Add classtime</a>\n                                    <a href=\"/classroom\">Add classroom</a>\n                                </div>\n                            </div>\n                        </li>\n                    }\n                    {(admin || user) &&  (\n                        <li>\n                            <button onClick={logoutHandler}>Logout</button>\n                        </li>\n                    )}\n                </ul>\n            </nav>\n        </header>\n    );\n};\n\nexport default MainNavigation;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/hooks/getData.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/pages/AddClassroomPage.js",[],"/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddClassroomForm.js",["119","120","121"],"import {useState, useRef, useContext, useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AddGroup.module.css';\n\nconst AddClassroomForm = () => {\n    const [name, setName] = useState(\"\");\n    const [capacity,setCapacity] = useState(0);\n\n    const authCtx = useContext(AuthContext);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(  () => {\n    }, [])\n\n\n    const submitHandler = async (event) => {\n        event.preventDefault();\n\n        setIsLoading(true);\n\n        const response = await fetch(\"/classroom\", {\n            method: 'POST',\n            credentials: 'same-origin',\n            body: JSON.stringify({\n                name,\n                capacity\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        console.log(response);\n        response.ok ?  alert(\"Аудиторію додано успішно.\") :  alert(\"Аудиторію не було додано. Статус: \"+ response.status);\n\n        setName('');\n        setCapacity(0);\n    };\n\n    return (\n        <section className={classes.auth}>\n            <h1>Додай нову аудиторію тут</h1>\n            <form onSubmit={submitHandler}>\n\n                <div className=\"form-group\">\n                    <input name=\"roomName\" id=\"roomName\" type=\"text\" onChange={e => setName(e.target.value)} placeholder=\"Номер\" className=\"form-control\"/>\n                </div>\n\n                <div className=\"form-group\">\n                    <input name=\"roomCapacity\" id=\"roomCapacity\" type=\"number\" onChange={e => setCapacity(Number.parseInt(e.target.value))} placeholder=\"Місткість\" className=\"form-control\"/>\n                </div>\n\n                <div className={classes.actions}>\n                    {!isLoading && (\n                        <button>Створити аудиторію</button>\n                    )}\n                    {isLoading && <p>Відправляємо дані...</p>}\n\n                </div>\n            </form>\n        </section>\n    );\n};\n\nexport default AddClassroomForm;","/home/yaroslava/WebstormProjects/kma-schedule-front/src/components/Forms/AddClassTimeForm.js",["122","123","124"],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":15,"column":8,"nodeType":"131","messageId":"132","endLine":15,"endColumn":24},{"ruleId":"129","severity":1,"message":"133","line":25,"column":11,"nodeType":"131","messageId":"132","endLine":25,"endColumn":18},{"ruleId":"129","severity":1,"message":"134","line":1,"column":28,"nodeType":"131","messageId":"132","endLine":1,"endColumn":38},{"ruleId":"129","severity":1,"message":"135","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"136","line":1,"column":19,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"135","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"137","line":15,"column":11,"nodeType":"131","messageId":"132","endLine":15,"endColumn":18},{"ruleId":"129","severity":1,"message":"136","line":1,"column":19,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"135","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"137","line":11,"column":11,"nodeType":"131","messageId":"132","endLine":11,"endColumn":18},{"ruleId":"129","severity":1,"message":"136","line":1,"column":19,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"137","line":11,"column":11,"nodeType":"131","messageId":"132","endLine":11,"endColumn":18},{"ruleId":"129","severity":1,"message":"138","line":9,"column":11,"nodeType":"131","messageId":"132","endLine":9,"endColumn":21},{"ruleId":"129","severity":1,"message":"139","line":10,"column":11,"nodeType":"131","messageId":"132","endLine":10,"endColumn":16},{"ruleId":"129","severity":1,"message":"136","line":1,"column":19,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"135","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"137","line":10,"column":11,"nodeType":"131","messageId":"132","endLine":10,"endColumn":18},{"ruleId":"129","severity":1,"message":"136","line":1,"column":19,"nodeType":"131","messageId":"132","endLine":1,"endColumn":25},{"ruleId":"129","severity":1,"message":"135","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":20},{"ruleId":"129","severity":1,"message":"137","line":11,"column":11,"nodeType":"131","messageId":"132","endLine":11,"endColumn":18},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'AddClassTimeForm' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'useContext' is defined but never used.","'useHistory' is defined but never used.","'useRef' is defined but never used.","'authCtx' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","'roles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]